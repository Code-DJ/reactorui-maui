<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     MauiReactor.Scaffold Version: <#= Assembly.GetExecutingAssembly().GetName().Version #>
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;

using MauiReactor.Animations;
//using MauiReactor.Shapes;
using MauiReactor.Internals;

namespace <#= Namespace() #>
{
    public partial interface I<#= TypeName() #> : <#= BaseInterfaceName() #>
    {
    <# foreach (var property in Properties) { #>
        PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>? <#= property.Name #> { get; set; }
    <# } #>

    <# foreach (var ev in Events) { 
    var genericArgs = ev.EventHandlerType.GetGenericArguments();
    #>
        Action? <#= ev.Name #>Action { get; set; }
        Action<object?, <#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>? <#= ev.Name #>ActionWithArgs { get; set; }
    <# } #>

    }
    <# if (IsTypeSealed()) { #>
    public sealed partial class <#= TypeName() #> : <#= BaseTypeName() #><<#= FullTypeName() #>>, I<#= TypeName() #>
    {
        public <#= TypeName() #>()
        { 
        
        }

        public <#= TypeName() #>(Action<<#= FullTypeName() #>?> componentRefAction)
            : base(componentRefAction)
        {

        }
    <# } else if (IsTypeNotAbstractWithEmptyConstructur()) { #>
    public partial class <#= TypeName() #><T> : <#= BaseTypeName() #><T>, I<#= TypeName() #> where T : <#= FullTypeName() #>, new()
    {
        public <#= TypeName() #>()
        { 
        
        }

        public <#= TypeName() #>(Action<T?> componentRefAction)
            : base(componentRefAction)
        {

        }
    <# } else { #>
    public abstract partial class <#= TypeName() #><T> : <#= BaseTypeName() #><T>, I<#= TypeName() #> where T : <#= FullTypeName() #>, new()
    {
        protected <#= TypeName() #>()
        { 
        
        }

        protected <#= TypeName() #>(Action<T?> componentRefAction)
            : base(componentRefAction)
        {

        }    
    <# } #>

        <# foreach (var property in Properties) { #>
        PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>? I<#= TypeName() #>.<#= property.Name #> { get; set; }
        <# } #>

        <# foreach (var ev in Events) {
        var genericArgs = ev.EventHandlerType.GetGenericArguments(); #>
        Action? I<#= TypeName() #>.<#= ev.Name #>Action { get; set; }
        Action<object?, <#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>>? I<#= TypeName() #>.<#= ev.Name #>ActionWithArgs { get; set; }
        <# } #>

        protected override void OnUpdate()
        {
            OnBeginUpdate();
            <# if (Properties.Any()) { #>

            Validate.EnsureNotNull(NativeControl);
            var thisAsI<#= TypeName() #> = (I<#= TypeName() #>)this;
            <# foreach (var property in Properties) { #>
            SetPropertyValue(NativeControl, <#= FullTypeName() #>.<#= property.Name #>Property, thisAsI<#= TypeName() #>.<#= property.Name #>);
            <# } #>

            <# } #>

            base.OnUpdate();

            OnEndUpdate();
        }

        partial void OnBeginUpdate();
        partial void OnEndUpdate();

        <# if (Events.Any()) { #>
        protected override void OnAttachNativeEvents()
        {
            Validate.EnsureNotNull(NativeControl);

            var thisAsI<#= TypeName() #> = (I<#= TypeName() #>)this;
            <# foreach (var ev in Events) { #>
            if (thisAsI<#= TypeName() #>.<#= ev.Name #>Action != null || thisAsI<#= TypeName() #>.<#= ev.Name #>ActionWithArgs != null)
            {
                NativeControl.<#= ev.Name #> += NativeControl_<#= ev.Name #>;
            }
            <# } #>

            base.OnAttachNativeEvents();
        }

        <# foreach (var ev in Events) { 
        var genericArgs = ev.EventHandlerType.GetGenericArguments();
        #>
        private void NativeControl_<#= ev.Name #>(object? sender, <#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #> e)
        {
            var thisAsI<#= TypeName() #> = (I<#= TypeName() #>)this;
            thisAsI<#= TypeName() #>.<#= ev.Name #>Action?.Invoke();
            thisAsI<#= TypeName() #>.<#= ev.Name #>ActionWithArgs?.Invoke(sender, e);
        }
        <# } #>

        protected override void OnDetachNativeEvents()
        {
            if (NativeControl != null)
            {
            <# foreach (var ev in Events) { #>
            NativeControl.<#= ev.Name #> -= NativeControl_<#= ev.Name #>;
            <# } #>
            }

            base.OnDetachNativeEvents();
        }
        <# } #>

    }

    <# if (IsTypeNotAbstractWithEmptyConstructur() && !IsTypeSealed()) { #>
    public partial class <#= TypeName() #> : <#= TypeName() #><<#= FullTypeName() #>>
    {
        public <#= TypeName() #>()
        { 
        
        }

        public <#= TypeName() #>(Action<<#= FullTypeName() #>?> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    <# } #>

    public static partial class <#= TypeName() #>Extensions
    {
        <# foreach (var property in Properties) { #>
        <# if (property.PropertyType == typeof(double)) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, <#= property.PropertyType.FullName.ToResevedWordFullTypeName() #> <#= property.Name.CamelCase() #>, RxDoubleAnimation? customAnimation = null) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(<#= property.Name.CamelCase() #>);
            <#= TypeName().ToLocalVariableName() #>.AppendAnimatable(<#= FullTypeName() #>.<#= property.Name #>Property, customAnimation ?? new RxDoubleAnimation(<#= property.Name.CamelCase() #>), v => <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(v.CurrentValue()));
            return <#= TypeName().ToLocalVariableName() #>;
        }        
        <# } else { #>
        public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, <#= property.PropertyType.FullName.ToResevedWordFullTypeName() #> <#= property.Name.CamelCase() #>) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(<#= property.Name.CamelCase() #>);
            return <#= TypeName().ToLocalVariableName() #>;
        }       
        <# } #>

        public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Func<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>> <#= property.Name.CamelCase() #>Func) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(<#= property.Name.CamelCase() #>Func);
            return <#= TypeName().ToLocalVariableName() #>;
        }
        <# if (property.PropertyType.Name == "Thickness") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double leftRight, double topBottom) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(new Thickness(leftRight, topBottom));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double uniformSize) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(new Thickness(uniformSize));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        <# } #>
        <# if (property.PropertyType.FullName == "Microsoft.Maui.Graphics.Point") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double x, double y) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(new Microsoft.Maui.Graphics.Point(x, y));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        <# } #>
        

        <# if (property.PropertyType.Name == "CornerRadius") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double uniformRadius) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(new CornerRadius(uniformRadius));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, double topLeft, double topRight, double bottomLeft, double bottomRight) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(new CornerRadius(topLeft, topRight, bottomLeft, bottomRight));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        <# } #>
        <# if (property.Name == "FontSize") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, NamedSize size) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(Device.GetNamedSize(size, typeof(<#= TypeName() #>)));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        <# } #>
        <# if (property.PropertyType.Name == "ImageSource") { 
               var propertyName = property.Name.Length <= 6 ? property.Name : property.Name.Substring(0, property.Name.Length - 6); #>
        public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, string file) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(Microsoft.Maui.Controls.ImageSource.FromFile(file));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, string fileAndroid, string fileiOS) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(Device.RuntimePlatform == Device.Android ? Microsoft.Maui.Controls.ImageSource.FromFile(fileAndroid) : Microsoft.Maui.Controls.ImageSource.FromFile(fileiOS));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, string resourceName, Assembly sourceAssembly) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(Microsoft.Maui.Controls.ImageSource.FromResource(resourceName, sourceAssembly));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, Uri imageUri) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(Microsoft.Maui.Controls.ImageSource.FromUri(imageUri));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(new UriImageSource
            {
                Uri = imageUri,
                CachingEnabled = cachingEnabled,
                CacheValidity = cacheValidity
            });
            return <#= TypeName().ToLocalVariableName() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName().ToLocalVariableName() #>, Func<Stream> imageStream) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.FullName.ToResevedWordFullTypeName() #>>(Microsoft.Maui.Controls.ImageSource.FromStream(imageStream));
            return <#= TypeName().ToLocalVariableName() #>;
        }
        <# } #>

        <# } #>
        
        <# foreach (var ev in Events) {
        var genericArgs = ev.EventHandlerType.GetGenericArguments();
        #>
        public static T On<#= ev.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Action <#= ev.Name.ToLocalVariableName() #>Action) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= ev.Name #>Action = <#= ev.Name.ToLocalVariableName() #>Action;
            return <#= TypeName().ToLocalVariableName() #>;
        }

        public static T On<#= ev.Name #><T>(this T <#= TypeName().ToLocalVariableName() #>, Action<object?, <#= genericArgs.Length > 0 ? genericArgs[0].Name : "EventArgs" #>> <#= ev.Name.ToLocalVariableName() #>ActionWithArgs) where T : I<#= TypeName() #>
        {
            <#= TypeName().ToLocalVariableName() #>.<#= ev.Name #>ActionWithArgs = <#= ev.Name.ToLocalVariableName() #>ActionWithArgs;
            return <#= TypeName().ToLocalVariableName() #>;
        }
        <# } #>
    }
}
